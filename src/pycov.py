#!/usr/bin/env python

"""
Generate summary report for objective measurement of statement coverage
results

Usage: pycov [-v] [-t] [-c] [-q] files

       -v	be more verbose
       -q	be less verbose
       -t	generate totals
       -c	generate CSV file output suitable for use in spreadsheet
       
files are one or more .cover files generated by trace module execution.
"""

import getopt, sys, string, re

def main():
    opts, args = getopt.getopt(sys.argv[1:], "vtqc:")
    verbose = 0
    quiet = 0
    showtotal = 0
    csv = None
    for opt, arg in opts:
        if opt == "-v":
            verbose = 1
            quiet = 0
        elif opt == "-q":
            quiet = 1
            verbose = 0
        elif opt == "-t":
            showtotal = 1
        elif opt == "-c":
            csv = open(arg, "wb")
    
    if csv:
        csv.write('"file","lines","blank lines","module-level lines",'
                  '"executed lines","missed lines","comment lines",'
                  '"function/method defs","functions executed",'
                  '"functions missed"'
                  '\n')
        
    if not args:
        counts = (nlines, nblanks, nmods, nhits, nmissed, ncomments,
                  ndefs, nhdefs, nmdefs) = count(sys.stdin)

        if csv:
            csv.write('"stdin",')
            csv.write(string.join(map(str, counts), ","))
            csv.write('\n')
            
        if not quiet:
            display("stdin", nlines, nblanks, nmods, nhits, nmissed, ncomments,
                    ndefs, nhdefs, nmdefs, verbose)
    else:
        tlines = tblanks = tmods = thits = tmissed = tcomments = \
                 tdefs = thdefs = tmdefs = 0
        for f in args:
            counts = (nlines, nblanks, nmods, nhits, nmissed, ncomments,
                      ndefs, nhdefs, nmdefs) = count(open(f))
            tlines = tlines + nlines
            tblanks = tblanks + nblanks
            tmods = tmods + nmods
            thits = thits + nhits
            tmissed = tmissed + nmissed
            tcomments = tcomments + ncomments
            tdefs = tdefs + ndefs
            thdefs = thdefs + nhdefs
            tmdefs = tmdefs + nmdefs
            f = re.sub(r"\.cover$", ".py", f)
            if csv:
                csv.write('"%s",' % f)
                csv.write(string.join(map(str, counts), ","))
                csv.write('\n')

            if not quiet:
                display(f, nlines, nblanks, nmods, nhits, nmissed, ncomments,
                        ndefs, nhdefs, nmdefs, verbose)

        if showtotal:
            # totals never written to csv file - summing rows/columns is a
            # job for a spreadsheet...
            if not quiet:
                display("total", tlines, tblanks, tmods, thits, tmissed,
                        tcomments, tdefs, thdefs, tmdefs, verbose)

def display(file, nlines, nblanks, nmods, nhits, nmissed, ncomments,
            ndefs, nhdefs, nmdefs, verbose):
    coverage = (100*(float(nhits+nmods)/(nlines-ncomments-nblanks)))
    if verbose:
        print "*** %s (%.2f%% coverage) ***" % (file, coverage)
        print "%5d total lines" % nlines
        print "%5d comment lines" % ncomments
        print "%5d blank lines" % nblanks
        print "%5d executable lines" % (nlines-ncomments-nblanks)
        print "%5d executed at least once (%.2f%%)" % (nhits+nmods, coverage)
        print "%5d missed (%.2f%%)" % (nmissed, 100-coverage)
        print "-----"
        print "%5d functions or methods" % ndefs
        print "%5d (%.2f%%) executed at least once" % \
              (nhdefs, (100*(float(nhdefs)/ndefs)))

    else:
        print "%6.2f%%: %s" % (coverage, file)

def count(fp):
    nlines = nblanks = nmods = nhits = nmissed = ncomments = 0
    ndefs = nhdefs = nmdefs = 0
    lines = map(string.rstrip, fp.readlines())
    nlines = len(lines)
    for line in lines:
        if re.match(r'>>>>>>\s*def', line) is not None:
            ndefs = ndefs + 1
            nmdefs = nmdefs + 1
        elif re.match(r'\s*\d+:\s*def', line) is not None:
            ndefs = ndefs + 1
            nhdefs = nhdefs + 1
            
        if re.match(r'\s+\.\s*#', line) is not None:
            ncomments = ncomments + 1
        elif re.match(r'\s+\.', line) is not None:
            nblanks = nblanks + 1
        elif re.match(r'>>>>>> [a-z]', line) is not None:
            nmods = nmods + 1
        elif (re.match(r'\s*[0-9]+:', line) is not None or
              re.match(r'      ', line) is not None):
            nhits = nhits + 1
        elif re.match(r'>>>>>>', line) is not None:
            nmissed = nmissed + 1
        else:
            raise ValueError, "unrecognized line: %s" % `line`
            
    return (nlines, nblanks, nmods, nhits, nmissed, ncomments,
            ndefs, nhdefs, nmdefs)

if __name__ == "__main__":
    main()
    
