import threading
from typing import Any

RESOLUTIONS: Any

def backend(package): ...
def prefix(base, cls): ...

class AbstractListener(threading.Thread):
    class StopException(Exception): ...
    daemon: bool
    def __init__(self, suppress: bool = ..., **kwargs): ...
    @property
    def suppress(self): ...
    @property
    def running(self): ...
    def stop(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, value, traceback) -> None: ...
    def wait(self) -> None: ...
    def run(self) -> None: ...
    def join(self, *args) -> None: ...

class Events:
    class Event:
        def __eq__(self, other): ...
    start: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...
    def get(self, timeout: Any | None = ...): ...

class NotifierMixin: ...
